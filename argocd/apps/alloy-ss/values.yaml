alloy:
  controller:
    type: 'statefulset'
    replicas: 2
  crds:
    create: true
  serviceMonitor:
    enabled: true
  alloy:
    clustering:
      enabled: true
    configMap:
      create: true
      content: |-
        // Monitoring
        prometheus.remote_write "main" {
          endpoint {
            url = "http://mimir-nginx.mimir.svc.cluster.local:80/api/v1/push"
          }
        }

        prometheus.operator.podmonitors "main" {
          forward_to = [prometheus.remote_write.main.receiver]
          clustering {
            enabled = true
          }
        }

        prometheus.operator.servicemonitors "main" {
          forward_to = [prometheus.remote_write.main.receiver]
          clustering {
            enabled = true
          }
        }

        // Logging
        discovery.kubernetes "pods" {
          role = "pod"

          // attach_metadata {
          //   node = true
          // }
        }

        discovery.relabel "pods" {
          targets = discovery.kubernetes.pods.targets

          rule {
            source_labels = ["__meta_kubernetes_namespace"]
            target_label = "namespace"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_name"]
            target_label = "pod"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_container_name"]
            target_label = "container"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_container_image"]
            target_label = "image"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_node_name"]
            target_label = "node"
          }
        }

        loki.relabel "drop" {
          forward_to = [loki.write.main.receiver]
          rule {
            action = "labeldrop"
            regex = "job|instance"
          }
        }

        loki.source.kubernetes "main" {
          targets    = discovery.relabel.pods.output
          forward_to = [loki.write.main.receiver]

          clustering {
            enabled = true
          }
        }

        loki.write "main" {
          endpoint {
            url = "http://loki-gateway.loki.svc.cluster.local:80/loki/api/v1/push"
          }
        }

        // Tracing
        // Tracing of alloy itself
        tracing {
          sampling_fraction = 0.1

          write_to = [otelcol.exporter.otlp.tempo.input]
        }

        otelcol.receiver.otlp "main" {
          grpc { }

          http { }

          output {
            traces = [otelcol.exporter.otlp.tempo.input]
          }
        }

        otelcol.processor.k8sattributes "labels" {
          output {
            traces = [otelcol.exporter.otlp.tempo.input]
          }

          passthrough = true
        }

        otelcol.exporter.otlp "tempo" {
          // Send traces to a locally running Tempo without TLS enabled.
          // gRPC
          client {
            endpoint = "tempo-distributor.tempo.svc.cluster.local:4317"

            tls {
              insecure             = true
              insecure_skip_verify = true
            }
          }
        }

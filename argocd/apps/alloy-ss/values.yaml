alloy:
  controller:
    type: 'statefulset'
    replicas: 2
  crds:
    create: true
  serviceMonitor:
    enabled: true
  alloy:
    clustering:
      enabled: true
    configMap:
      create: true
      content: |-
        // Monitoring
        prometheus.remote_write "main" {
          endpoint {
            url = "http://mimir-nginx.mimir.svc.cluster.local:80/api/v1/push"
          }
        }

        prometheus.operator.podmonitors "main" {
          forward_to = [prometheus.remote_write.main.receiver]
          clustering {
            enabled = true
          }
        }

        prometheus.operator.servicemonitors "main" {
          forward_to = [prometheus.remote_write.main.receiver]
          clustering {
            enabled = true
          }
        }

        // Logging
        // Logging of alloy itself
        logging {
          level  = "info"
          format = "logfmt"
        }

        discovery.kubernetes "pods" {
          role = "pod"
        }

        discovery.relabel "pods" {
          targets = discovery.kubernetes.pods.targets

          rule {
            source_labels = ["__meta_kubernetes_namespace"]
            target_label = "namespace"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_name"]
            target_label = "pod"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_container_name"]
            target_label = "container"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_container_image"]
            target_label = "image"
          }
          rule {
            source_labels = ["__meta_kubernetes_pod_node_name"]
            target_label = "node"
          }

          // set the container runtime as a label
          rule {
            action = "replace"
            source_labels = ["__meta_kubernetes_pod_container_id"]
            regex = "^(\\S+):\\/\\/.+$"
            replacement = "$1"
            target_label = "tmp_container_runtime"
          }
        }

        loki.source.kubernetes "main" {
          targets    = discovery.relabel.pods.output
          forward_to = [loki.process.pod_logs.receiver]

          clustering {
            enabled = true
          }
        }

        loki.process "pod_logs" {
          stage.match {
            selector = "{tmp_container_runtime=\"containerd\"}"
            // the cri processing stage extracts the following k/v pairs: log, stream, time, flags
            stage.cri {}

            // Set the extract flags and stream values as labels
            stage.labels {
              values = {
                flags  = "",
                stream  = "",
              }
            }
          }

          // Also drop the temporary container runtime label as it is no longer needed.
          stage.label_drop {
            values = ["filename", "tmp_container_runtime", "job", "instance"]
          }

          // stage.multiline {
          //   firstline     = "^time="
          //   max_wait_time = "10s"
          // }

          stage.logfmt {
            mapping = {
              "service"  = "",
              "level"    = "",
              "status"   = "",
              "trace_id" = ""
            }
          }

          stage.labels {
              values = {
                "service"  = "",
                "level"    = "",
                "status"   = "",
                "traceId" = "trace_id",
              }
          }

          forward_to = [loki.process.static_labels.receiver]
        }

        loki.process "static_labels" {
          stage.static_labels {
            values = {
              cluster = "eks-sandbox",
            }
          }
          forward_to = [loki.write.main.receiver]
        }

        loki.write "main" {
          endpoint {
            url = "http://loki-gateway.loki.svc.cluster.local:80/loki/api/v1/push"
          }
        }

        // Tracing
        // Tracing of alloy itself
        tracing {
          sampling_fraction = 0.1

          write_to = [otelcol.exporter.otlp.tempo.input]
        }

        otelcol.receiver.otlp "main" {
          grpc { }

          http { }

          output {
            traces = [otelcol.exporter.otlp.tempo.input]
          }
        }

        otelcol.processor.k8sattributes "labels" {
          output {
            traces = [otelcol.exporter.otlp.tempo.input]
          }

          extract {
            // https://grafana.com/docs/alloy/latest/reference/components/otelcol.processor.k8sattributes/#pod_association-block
          }

          pod_association {
            source {
              from = "resource_attribute"
              name = "k8s.pod.ip"
            }
          }
        }

        otelcol.exporter.otlp "tempo" {
          // Send traces to a locally running Tempo without TLS enabled.
          // gRPC
          client {
            endpoint = "tempo-distributor.tempo.svc.cluster.local:4317"

            tls {
              insecure             = true
              insecure_skip_verify = true
            }
          }
        }
